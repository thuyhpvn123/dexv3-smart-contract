{"abi":[{"type":"function","name":"swapExactTokensForTokens","inputs":[{"name":"amountIn","type":"uint256","internalType":"uint256"},{"name":"amountOutMin","type":"uint256","internalType":"uint256"},{"name":"path","type":"address[]","internalType":"address[]"},{"name":"to","type":"address","internalType":"address"}],"outputs":[{"name":"amountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"swapTokensForExactTokens","inputs":[{"name":"amountOut","type":"uint256","internalType":"uint256"},{"name":"amountInMax","type":"uint256","internalType":"uint256"},{"name":"path","type":"address[]","internalType":"address[]"},{"name":"to","type":"address","internalType":"address"}],"outputs":[{"name":"amountIn","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"swapExactTokensForTokens(uint256,uint256,address[],address)":"472b43f3","swapTokensForExactTokens(uint256,uint256,address[],address)":"42712a67"},"rawMetadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"amountIn\":\"The amount of token to swap\",\"amountOutMin\":\"The minimum amount of output that must be received\",\"path\":\"The ordered list of tokens to swap through\",\"to\":\"The recipient address\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"swapTokensForExactTokens(uint256,uint256,address[],address)\":{\"params\":{\"amountInMax\":\"The maximum amount of input that the caller will pay\",\"amountOut\":\"The amount of token to swap for\",\"path\":\"The ordered list of tokens to swap through\",\"to\":\"The recipient address\"},\"returns\":{\"amountIn\":\"The amount of token to pay\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"swapTokensForExactTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swaps as little as possible of one token for an exact amount of another token\"}},\"notice\":\"Functions for swapping tokens via PancakeSwap V2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/router/contracts/interfaces/IV2SwapRouter.sol\":\"IV2SwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable@3.4.0/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts@3.4.0-solc-0.7/=node_modules/@openzeppelin/contracts/\",\":@pancakeswap/=node_modules/@pancakeswap/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/router/contracts/interfaces/IV2SwapRouter.sol\":{\"keccak256\":\"0x344c745c56714396bc054515cf49645f4f52e909319314f5119467c35fc5bfda\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://7dc3a959f2216434de1bf892cd944a17ee689c4a61ed6f0dabaea5719ca60a5d\",\"dweb:/ipfs/QmV1sNbzgf733WR4q59EfCHuCvhk9nSevno4SmkCB6CCmX\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"}],"stateMutability":"payable","type":"function","name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"}],"stateMutability":"payable","type":"function","name":"swapTokensForExactTokens","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"swapExactTokensForTokens(uint256,uint256,address[],address)":{"details":"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.","params":{"amountIn":"The amount of token to swap","amountOutMin":"The minimum amount of output that must be received","path":"The ordered list of tokens to swap through","to":"The recipient address"},"returns":{"amountOut":"The amount of the received token"}},"swapTokensForExactTokens(uint256,uint256,address[],address)":{"params":{"amountInMax":"The maximum amount of input that the caller will pay","amountOut":"The amount of token to swap for","path":"The ordered list of tokens to swap through","to":"The recipient address"},"returns":{"amountIn":"The amount of token to pay"}}},"version":1},"userdoc":{"kind":"user","methods":{"swapExactTokensForTokens(uint256,uint256,address[],address)":{"notice":"Swaps `amountIn` of one token for as much as possible of another token"},"swapTokensForExactTokens(uint256,uint256,address[],address)":{"notice":"Swaps as little as possible of one token for an exact amount of another token"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable@3.4.0/=node_modules/@openzeppelin/contracts-upgradeable/","@openzeppelin/contracts@3.4.0-solc-0.7/=node_modules/@openzeppelin/contracts/","@pancakeswap/=node_modules/@pancakeswap/","@uniswap/=node_modules/@uniswap/","base64-sol/=node_modules/base64-sol/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/router/contracts/interfaces/IV2SwapRouter.sol":"IV2SwapRouter"},"evmVersion":"istanbul","libraries":{}},"sources":{"src/router/contracts/interfaces/IV2SwapRouter.sol":{"keccak256":"0x344c745c56714396bc054515cf49645f4f52e909319314f5119467c35fc5bfda","urls":["bzz-raw://7dc3a959f2216434de1bf892cd944a17ee689c4a61ed6f0dabaea5719ca60a5d","dweb:/ipfs/QmV1sNbzgf733WR4q59EfCHuCvhk9nSevno4SmkCB6CCmX"],"license":"GPL-2.0-or-later"}},"version":1},"id":125}