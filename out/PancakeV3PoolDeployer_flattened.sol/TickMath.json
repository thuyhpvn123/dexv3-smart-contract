{"abi":[],"bytecode":{"object":"0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206bddf16e65900579a300e225d9bd93564dc0552e24c0bd78dca812a3ed471b5264736f6c63430007060033","sourceMap":"30130:8331:73:-:0;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206bddf16e65900579a300e225d9bd93564dc0552e24c0bd78dca812a3ed471b5264736f6c63430007060033","sourceMap":"30130:8331:73:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v3-core/contracts/PancakeV3PoolDeployer_flattened.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable@3.4.0/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts@3.4.0-solc-0.7/=node_modules/@openzeppelin/contracts/\",\":@pancakeswap/=node_modules/@pancakeswap/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/v3-core/contracts/PancakeV3PoolDeployer_flattened.sol\":{\"keccak256\":\"0xb79dca837789d4c73c51dfe3cf02882830fded122e3779d86b91ea72fbe6c303\",\"urls\":[\"bzz-raw://14019a56e4cf7d425543598d5b1459cd5ce5406cc5e19983f22473b9df8dccf8\",\"dweb:/ipfs/Qmds97GpCmrGZ3RvGcEcTYroQBhejbYd5qyFyiE1Snzz2i\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable@3.4.0/=node_modules/@openzeppelin/contracts-upgradeable/","@openzeppelin/contracts@3.4.0-solc-0.7/=node_modules/@openzeppelin/contracts/","@pancakeswap/=node_modules/@pancakeswap/","@uniswap/=node_modules/@uniswap/","base64-sol/=node_modules/base64-sol/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/v3-core/contracts/PancakeV3PoolDeployer_flattened.sol":"TickMath"},"evmVersion":"istanbul","libraries":{}},"sources":{"src/v3-core/contracts/PancakeV3PoolDeployer_flattened.sol":{"keccak256":"0xb79dca837789d4c73c51dfe3cf02882830fded122e3779d86b91ea72fbe6c303","urls":["bzz-raw://14019a56e4cf7d425543598d5b1459cd5ce5406cc5e19983f22473b9df8dccf8","dweb:/ipfs/Qmds97GpCmrGZ3RvGcEcTYroQBhejbYd5qyFyiE1Snzz2i"],"license":null}},"version":1},"id":73}